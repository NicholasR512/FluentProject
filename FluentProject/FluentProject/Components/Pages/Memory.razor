@page "/memory"
@rendermode InteractiveServer

<PageTitle>Memory</PageTitle>
<div role="status" style="padding-bottom: 1em; margin-left: 35%;">
    <FluentBadge class="@colorClass">@result</FluentBadge>
</div>
<h2>@attempts</h2>
<div>
    <span>
        <FluentButton @onclick="() => Play(gg[emj[0]])" Disabled="@flipped[gg[emj[0]]]"><p style="display: @shown[gg[emj[0]]]; font-size: 65px;">@emj[0]</p></FluentButton>
        <FluentButton @onclick="() => Play(gg[emj[1]])" Disabled="@flipped[gg[emj[1]]]"><p style="display: @shown[gg[emj[1]]]; font-size: 65px">@emj[1]</p></FluentButton>
        <FluentButton @onclick="() => Play(gg[emj[2]])" Disabled="@flipped[gg[emj[2]]]"><p style="display: @shown[gg[emj[2]]];font-size: 65px">@emj[2]</p></FluentButton>
        <FluentButton @onclick="() => Play(gg[emj[3]])" Disabled="@flipped[gg[emj[3]]]"><p style="display: @shown[gg[emj[3]]];font-size: 65px">@emj[3]</p></FluentButton>
    </span>
    <span>
        <FluentButton @onclick="() => Play(gg[emj[4]])" Disabled="@flipped[gg[emj[4]]]"><p style="display: @shown[gg[emj[4]]]; font-size: 65px">@emj[4]</p></FluentButton>
        <FluentButton @onclick="() => Play(gg[emj[5]])" Disabled="@flipped[gg[emj[5]]]"><p style="display: @shown[gg[emj[5]]]; font-size: 65px">@emj[5]</p></FluentButton>
        <FluentButton @onclick="() => Play(gg[emj[6]])" Disabled="@flipped[gg[emj[6]]]"><p style="display: @shown[gg[emj[6]]]; font-size: 65px">@emj[6]</p></FluentButton>
        <FluentButton @onclick="() => Play(gg[emj[7]])" Disabled="@flipped[gg[emj[7]]]"><p style="display: @shown[gg[emj[7]]]; font-size: 65px">@emj[7]</p></FluentButton>
    </span>
    <span>
        <FluentButton @onclick="() => Play(gg[emj[8]])" Disabled="@flipped[gg[emj[8]]]"><p style="display: @shown[gg[emj[8]]]; font-size: 65px">@emj[8]</p></FluentButton>
        <FluentButton @onclick="() => Play(gg[emj[9]])" Disabled="@flipped[gg[emj[9]]]"><p style="display: @shown[gg[emj[9]]]; font-size: 65px">@emj[9]</p></FluentButton>
        <FluentButton @onclick="() => Play(gg[emj[10]])" Disabled="@flipped[gg[emj[10]]]"><p style="display: @shown[gg[emj[10]]]; font-size: 65px">@emj[10]</p></FluentButton>
        <FluentButton @onclick="() => Play(gg[emj[11]])" Disabled="@flipped[gg[emj[11]]]"><p style="display: @shown[gg[emj[11]]]; font-size: 65px">@emj[11]</p></FluentButton>
    </span>
    <span>
        <FluentButton @onclick="() => Play(gg[emj[12]])" Disabled="@flipped[gg[emj[12]]]"><p style="display: @shown[gg[emj[12]]]; font-size: 65px">@emj[12]</p></FluentButton>
        <FluentButton @onclick="() => Play(gg[emj[13]])" Disabled="@flipped[gg[emj[13]]]"><p style="display: @shown[gg[emj[13]]]; font-size: 65px">@emj[13]</p></FluentButton>
        <FluentButton @onclick="() => Play(gg[emj[14]])" Disabled="@flipped[gg[emj[14]]]"><p style="display: @shown[gg[emj[14]]]; font-size: 65px">@emj[14]</p></FluentButton>
        <FluentButton @onclick="() => Play(gg[emj[15]])" Disabled="@flipped[gg[emj[15]]]"><p style="display: @shown[gg[emj[15]]]; font-size: 65px">@emj[15]</p></FluentButton>
    </span>
</div>
<FluentButton @onclick="() => Restart()">Restart</FluentButton>

@code {
    private int flipCount = 0;
    private int firstValue = 0;
    private int frValue = 0;
    private int attempts = 0;
    private bool isBusy = false;
    private string result = "";
    private string colorClass = "blue";

    private Dictionary<int, bool> flipped = new Dictionary<int, bool>()
    {
         {1, false}, {10, false}, {2, false}, {20, false},
         {3, false}, {30, false}, {4, false}, {40, false},
         {5, false}, {50, false}, {6, false}, {60, false},
         {7, false}, {70, false}, {8, false}, {80, false}
    };

    private Dictionary<int, string> shown = new Dictionary<int, string>()
    {
         {1, "none"}, {10, "none"}, {2, "none"}, {20, "none"},
         {3, "none"}, {30, "none"}, {4, "none"}, {40, "none"},
         {5, "none"}, {50, "none"}, {6, "none"}, {60, "none"},
         {7, "none"}, {70, "none"}, {8, "none"}, {80, "none"}
    };



    // Original emoji array
    string[] emj;
    string[] emj1 = new string[] { "🥸a", "🤑a", "🤡a", "🤑b", "😈a", "😎b", "😍a", "😎a", "🥶a", "💩a", "🥸b", "😈b", "😍b", "🥶b", "🤡b", "💩b" };

    // Initialize with a shuffled copy
    protected override void OnInitialized()
    {
        ShuffleEmojis();
    }

    // Fisher-Yates shuffle algorithm
    void ShuffleEmojis()
    {
        // Create a copy so the original array remains unchanged
        emj = (string[])emj1.Clone();
        Random random = new Random();
        for (int i = emj.Length - 1; i > 0; i--)
        {
            int j = random.Next(i + 1);
            // Swap elements at positions i and j
            string temp = emj[i];
            emj[i] = emj[j];
            emj[j] = temp;
        }
    }
    private Dictionary<string, int> gg = new Dictionary<string, int>()
    {
        {"😎a", 1}, {"😎b", 10}, {"🤑a", 2}, {"🤑b", 20},
        {"🤡a", 3}, {"🤡b", 30}, {"😈a", 4}, {"😈b", 40},
        {"😍a", 5}, {"😍b", 50}, {"🥶a", 6}, {"🥶b", 60},
        {"💩a", 7}, {"💩b", 70}, {"🥸a", 8}, {"🥸b", 80}
    };


    private int Display(int n)
    {
        return n > 8 ? n / 10 : n;
    }

    private async Task Play(int n)
    {
        if (isBusy) return;

        int curr = Display(n);
        flipped[n] = true;
        shown[n] = "block";
        StateHasChanged();

        if (flipCount == 0)
        {
            firstValue = curr;
            frValue = n;
            flipCount = 1;
        }
        else
        {
            attempts++;
            if (firstValue == curr)
            {
                Console.WriteLine("Match!");
                result = "Match! Cue the victory dance!";
                colorClass = "green";
                flipCount = 0;
            }
            else
            {

                isBusy = true;

                int previousCard = frValue;
                result = "No match—better luck next time!";
                colorClass = "red";

                StateHasChanged();

                await UseTaskDelay();
                shown[n] = "none";
                shown[previousCard] = "none";
                flipped[previousCard] = false;
                flipped[n] = false;
                flipCount = 0;
                isBusy = false;
                StateHasChanged();
            }
        }
    }

    private async Task UseTaskDelay(int delayMilliseconds = 2000)
    {
        await Task.Delay(delayMilliseconds);
    }

    private void Restart()
    {
        int num = 1;
        attempts = 0;
        while (num != 9)
        {
            if (num < 9)
            {
                flipped[num] = false;
                shown[num] = "none";
                num *= 10;
            }
            else
            {
                flipped[num] = false;
                shown[num] = "none";
                num /= 10;
                num++;
            }
        }
        ShuffleEmojis();
    }

}


