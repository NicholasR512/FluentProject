@page "/memory"
@rendermode InteractiveServer

<PageTitle>Memory</PageTitle>

<div>
    <span>
        <FluentButton @onclick="() => Play(1)" Disabled="@flipped[1]"><p style="display: @shown[1]; font-size: 65px">😎</p></FluentButton>
        <FluentButton @onclick="() => Play(3)" Disabled="@flipped[3]"><p style="display: @shown[3]; font-size: 65px">🤑</p></FluentButton>
        <FluentButton @onclick="() => Play(7)" Disabled="@flipped[7]"><p style="display: @shown[7];font-size: 65px">🤡</p></FluentButton>
        <FluentButton @onclick="() => Play(30)" Disabled="@flipped[30]"><p style="display: @shown[30];font-size: 65px">🤑</p></FluentButton>
    </span>
    <span>
        <FluentButton @onclick="() => Play(6)" Disabled="@flipped[6]"><p style="display: @shown[6]; font-size: 65px">😈</p></FluentButton>
        <FluentButton @onclick="() => Play(10)" Disabled="@flipped[10]"><p style="display: @shown[10]; font-size: 65px">😎</p></FluentButton>
        <FluentButton @onclick="() => Play(8)" Disabled="@flipped[8]"><p style="display: @shown[8]; font-size: 65px">😍</p></FluentButton>
        <FluentButton @onclick="() => Play(2)" Disabled="@flipped[2]"><p style="display: @shown[2]; font-size: 65px">🥸</p></FluentButton>
    </span>
    <span>
        <FluentButton @onclick="() => Play(5)" Disabled="@flipped[5]"><p style="display: @shown[5]; font-size: 65px">🥶</p></FluentButton>
        <FluentButton @onclick="() => Play(4)" Disabled="@flipped[4]"><p style="display: @shown[4]; font-size: 65px">💩</p></FluentButton>
        <FluentButton @onclick="() => Play(20)" Disabled="@flipped[20]"><p style="display: @shown[20]; font-size: 65px">🥸</p></FluentButton>
        <FluentButton @onclick="() => Play(60)" Disabled="@flipped[60]"><p style="display: @shown[60]; font-size: 65px">😈</p></FluentButton>
    </span>
    <span>
        <FluentButton @onclick="() => Play(80)" Disabled="@flipped[80]"><p style="display: @shown[80]; font-size: 65px">😍</p></FluentButton>
        <FluentButton @onclick="() => Play(50)" Disabled="@flipped[50]"><p style="display: @shown[50]; font-size: 65px">🥶</p></FluentButton>
        <FluentButton @onclick="() => Play(70)" Disabled="@flipped[70]"><p style="display: @shown[70]; font-size: 65px">🤡</p></FluentButton>
        <FluentButton @onclick="() => Play(40)" Disabled="@flipped[40]"><p style="display: @shown[40]; font-size: 65px">💩</p></FluentButton>
    </span>
</div>
<FluentButton @onclick="() => Restart()">Restart</FluentButton>

@code {
    private int flipCount = 0;
    private int firstValue = 0;
    private int frValue = 0;
    private bool isBusy = false;

    private Dictionary<int, bool> flipped = new Dictionary<int, bool>()
    {
         {1, false}, {10, false}, {2, false}, {20, false},
         {3, false}, {30, false}, {4, false}, {40, false},
         {5, false}, {50, false}, {6, false}, {60, false},
         {7, false}, {70, false}, {8, false}, {80, false}
    };

    private Dictionary<int, string> shown = new Dictionary<int, string>()
    {
         {1, "none"}, {10, "none"}, {2, "none"}, {20, "none"},
         {3, "none"}, {30, "none"}, {4, "none"}, {40, "none"},
         {5, "none"}, {50, "none"}, {6, "none"}, {60, "none"},
         {7, "none"}, {70, "none"}, {8, "none"}, {80, "none"}
    };

    private int Display(int n)
    {
        return n > 8 ? n / 10 : n;
    }

    private async Task Play(int n)
    {
        if (isBusy) return; 

        int curr = Display(n);
        flipped[n] = true;
        shown[n] = "block";
        StateHasChanged();  

        if (flipCount == 0)
        {
            firstValue = curr;
            frValue = n;
            flipCount = 1;
        }
        else
        {
            if (firstValue == curr)
            {
                Console.WriteLine("Match!");
                flipCount = 0;
            }
            else
            {

                isBusy = true;

                int previousCard = frValue;

                StateHasChanged();

                await UseTaskDelay();
                shown[n] = "none";
                shown[previousCard] = "none";
                flipped[previousCard] = false;
                flipped[n] = false;
                flipCount = 0;
                isBusy = false;
                StateHasChanged();
            }
        }
    }

    private async Task UseTaskDelay(int delayMilliseconds = 2000)
    {
        await Task.Delay(delayMilliseconds);
    }

    private void Restart(){
        int num = 1;
        while(num != 9){
            if(num < 9){
                flipped[num] = false;
                shown[num] = "none";
                num *= 10;
            } else {
                flipped[num] = false;
                shown[num] = "none";
                num /= 10;
                num++;
            }
        }
    }
}
